let blackLocation = [];
let whiteLocation = [];
let blackID = [];
let whiteID = [];

var dx = [0, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3,
    -3, -3, -3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
var dy = [0, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4
    , -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, -5, -4, -3,
    -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1
    , 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5];
var board , yy = 0, zz = 0;
var score = [], im = -10000000000, AI = [0, 1, 100, 10000, 1000000, 100000000];


function tree() {
    var i, temp = -1, s;
    for (i = 120 + 14401; i <= 1728000 + 120 + 14400; i++) {
        if (score[i / 120] == im) {
            i += 119;
            continue;
        }
        score[i / 120] = Math.min(score[i / 120], score[i]);
    }
    for (i = 121; i <= 120 + 14400; i++) {
        if (score[i] == im) {
            continue;
        }
        score[i / 120] = (score[i / 120], score[i]);
    }
    s = im - 1;
    for (i = 1; i <= 120; i++) {
        if (score[i] >= s) {
            temp = i;
            s = score[i];
        }
    }
    return temp;
}

// 평가 함수 고려해야할 것 : 돌 개수, 최근에 둔 돌 근처에 있는 돌 수
function sc(index) {		//평가함수 플레이어(1) 에게 유리할때는 음수, AI(2)에게 유리할때는 양수
    var i, j, s = 0, temp, tf;
    for (i = 1; i <= 15; i++) {	//AI기준 가로 세로 연결된 돌 고려
        temp = 0;
        tf = 0;
        for (j = 1; j <= 15; j++) {
            if (board[index][i][j] == 2) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s += AI[temp];
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s += AI[temp];
            temp = 0;
            tf = 0;
        }
        temp = 0;
        tf = 0;
        for (j = 1; j <= 15; j++) {
            if (board[index][j][i] == 2) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s += AI[temp];
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s += AI[temp];
            temp = 0;
            tf = 0;
        }
    }
    for (i = 1; i <= 15; i++) {	//플레이어기준 가로 세로 연결된 돌 고려, 플레이어는 인공지능보다 가중치 2 배
        temp = 0;
        tf = 0;
        for (j = 1; j <= 15; j++) {
            if (board[index][i][j] == 1) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s -= AI[temp] * 2;
                    if (temp >= 3) {
                        if (board[index][i][j] == 2) {
                            s += AI[temp] * 3 / 2;
                        }
                        if (j - temp - 1 > 0) {
                            if (board[index][i][j - temp - 1] == 2) {
                                s += AI[temp] * 3 / 2;
                            }
                        }
                    }
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s -= 2 * AI[temp];
            temp = 0;
            tf = 0;
        }
        temp = 0;
        tf = 0;
        for (j = 1; j <= 15; j++) {
            if (board[index][j][i] == 1) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s -= AI[temp] * 2;
                    if (temp >= 3) {
                        if (board[index][j][i] == 2) {
                            s += AI[temp] * 3 / 2;
                        }
                        if (j - temp - 1 > 0) {
                            if (board[index][j - temp - 1][i] == 2) {
                                s += AI[temp] * 3 / 2;
                            }
                        }
                    }
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s -= 2 * AI[temp];
            temp = 0;
            tf = 0;
        }
    }
    for (i = 1; i <= 15; i++) {	//AI기준 대각선 고려(조선 아님)
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][16 - j][i + 1 - j] == 2) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s += AI[temp];
                    temp = 0;
                    tf = 0;
                }
            }
        }
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][j][15 - i + j] == 2) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s += AI[temp];
                    temp = 0;
                    tf = 0;
                }
            }
        }
    }
    for (i = 1; i <= 15; i++) {	//AI기준 대각선 고려(조선 아님)
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][16 - j][15 - i + j] == 2) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s += AI[temp];
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s += AI[temp];
            temp = 0;
            tf = 0;
        }
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][j][i - j + 1] == 2) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s += AI[temp];
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s += AI[temp];
            temp = 0;
            tf = 0;
        }
    }
    for (i = 1; i <= 15; i++) {	//AI기준 대각선 고려(조선 아님)
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][16 - j][i + 1 - j] == 1) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s -= AI[temp] * 4;
                    if (temp >= 3) {
                        if (board[index][16 - j][i + 1 - j] == 2) {
                            s += AI[temp] * 3;
                        }
                        if (i + 1 - j + temp + 1 < 15 && 16 - j + temp + 1 < 15) {
                            if (board[index][i][j] == 2) {
                                s += AI[temp] * 3;
                            }
                        }
                    }
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s -= AI[temp] * 4;
            temp = 0;
            tf = 0;
        }
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][j][15 - i + j] == 1) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s -= AI[temp] * 2;
                    if (temp >= 3) {
                        if (board[index][j][15 - i + j] == 2) {
                            s += AI[temp] * 3;
                        }
                        if (15 - i + j - temp - 1 > 0 && j - temp - 1 > 0) {
                            if (board[index][j - temp - 1][15 - i + j - temp - 1] == 2) {
                                s += AI[temp] * 3;
                            }
                        }
                    }
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s -= AI[temp] * 4;
            temp = 0;
            tf = 0;
        }
    }
    for (i = 1; i <= 15; i++) {	//AI기준 대각선 고려(조선 아님)
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][16 - j][15 - i + j] == 1) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s -= AI[temp] * 4;
                    if (temp >= 3) {
                        if (board[index][16 - j][15 - i + j] == 2) {
                            s += AI[temp] * 3;
                        }
                        if (15 - i + j - temp - 1 > 0 && 16 - j + temp + 1 < 15) {
                            if (board[index][i][j] == 2) {
                                s += AI[temp] * 3;
                            }
                        }
                    }
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s -= AI[temp] * 4;
            temp = 0;
            tf = 0;
        }
        temp = 0;
        tf = 0;
        for (j = 1; j <= i; j++) {
            if (board[index][j][i - j + 1] == 1) {
                temp++;
                tf = 1;
            } else {
                if (tf == 1) {
                    s -= AI[temp] * 4;
                    if (temp >= 3) {
                        if (board[index][j][i + 1 - j] == 2) {
                            s += AI[temp] * 3;
                        }
                        if (i + 1 - j + temp + 1 < 15 && j - temp - 1 > 0) {
                            if (board[index][j - temp - 1][15 - i + j - temp - 1] == 2) {
                                s += AI[temp] * 3;
                            }
                        }
                    }
                    temp = 0;
                    tf = 0;
                }
            }
        }
        if (tf == 1) {
            s -= AI[temp] * 4;
            temp = 0;
            tf = 0;
        }
    }
    return s;
}

function copy(a, b) {	//b 보드에 a보드를 복사함
    var i, j;
    for (i = 1; i <= 15; i++) {
        for (j = 1; j <= 15; j++) {
            board[b][i][j] = board[a][i][j];
        }
    }
}

function input(row, col) {
    var k = 0, t = 1, cnt1 = 0, x, y;
    row = Number(row),col = Number(col);
    x = row, y = col;

    board[0][x][y] = 1; //player1 착수, board[0]은 루트노드
    board[0][0][0] = x;
    board[0][0][1] = y;
    score[0] = sc(0);
    for (var i = 1; i <= 120; i++) {		//경우의 수 트리에 저장
        copy(0, i);
        if (x + dx[i] < 0 || x + dx[i] > 15 || y + dy[i] < 0 || y + dy[i] > 15) {
            score[i] = im;	//나중에 점수 계산(미니맥스 알고리즘)을 사용할때 논외로 빼놓기 위함
            for (var j = 1; j <= 120; j++) {
                score[i * 120 + j] = im;
                for (var k = 1; k <= 120; k++) {
                    score[(i * 120 + j) * 120 + k] = im;
                }
            }
        }
        else if (board[i][Number(x) + Number(dx[i])][Number(y) + Number(dy[i])] != 0) {		//이미 돌이 있는 경우
            score[i] = im;	//나중에 점수 계산(미니맥스 알고리즘)을 사용할때 논외로 빼놓기 위함
            for (var j = 1; j <= 120; j++) {
                score[i * 120 + j] = im;
                for (var k = 1; k <= 120; k++) {
                    score[(i * 120 + j) * 120 + k] = im;
                }
            }
        } else {
            board[i][x + dx[i]][y + dy[i]] = 2;
            board[i][0][0] = x + dx[i];
            board[i][0][1] = y + dy[i];
            score[i] = sc(i);
            for (var j = 1; j <= 120; j++) {
                copy(i, 120 * i + j);
                if (x + dx[i] + dx[j] < 0 || x + dx[i] + dx[j] > 15 || y + dy[i] + dy[j] < 0 || y + dy[i] + dy[j] > 15) {
                    score[i * 120 + j] = im;	//나중에 점수 계산(미니맥스 알고리즘)을 사용할때 논외로 빼놓기 위함
                    for (var k = 1; k <= 120; k++) {
                        score[(i * 120 + j) * 120 + k] = im;
                    }
                } else if (board[i * 120 + j][x + dx[i] + dx[j]][y + dy[i] + dy[j]] != 0) {		//이미 돌이 있는 경우
                    score[i * 120 + j] = im;	//나중에 점수 계산(미니맥스 알고리즘)을 사용할때 논외로 빼놓기 위함
                    for (var k = 1; k <= 120; k++) {
                        score[(i * 120 + j) * 120 + k] = im;
                    }
                } else {
                    board[i * 120 + j][x + dx[i] + dx[j]][y + dy[i] + dy[j]] = 1;
                    board[i * 120 + j][0][0] = x + dx[i] + dx[j];
                    board[i * 120 + j][0][1] = y + dy[i] + dy[j];
                    score[i * 120 + j] = sc(i * 120 + j);
                    for (var k = 1; k <= 120; k++) {
                        copy(i * 120 + j, (i * 120 + j) * 120 + k);
                        if (x + dx[i] + dx[j] + dx[k] > 15 || x + dx[i] + dx[j] + dx[k] < 0 || y + dy[i] + dy[j] + dy[k] > 15 || y + dy[i] + dy[j] + dy[k] < 0) {
                            score[(i * 120 + j) * 120 + k] = im;	//나중에 점수 계산(미니맥스 알고리즘)을 사용할때 논외로 빼놓기 위함
                        } else if (board[(i * 120 + j) * 120 + k][x + dx[i] + dx[j] + dx[k]][y + dy[i] + dy[j] + dy[k]] != 0) {		//이미 돌이 있는 경우
                            score[(i * 120 + j) * 120 + k] = im;	//나중에 점수 계산(미니맥스 알고리즘)을 사용할때 논외로 빼놓기 위함
                        } else {
                            board[(i * 120 + j) * 120 + k][x + dx[i] + dx[j] + dx[k]][y + dy[i] + dy[j] + dy[k]] = 2;
                            board[(i * 120 + j) * 120 + k][0][0] = x + dx[i] + dx[j] + dx[k];
                            board[(i * 120 + j) * 120 + k][0][1] = y + dy[i] + dy[j] + dy[k];
                            score[(i * 120 + j) * 120 + k] = sc((i * 120 + j) * 120 + k);
                        }
                    }
                }
            }
        }
    }

    var temp = tree();
    zz = x + dx[temp], yy = y + dy[temp];
}


// 오목돌 놓기
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.col').forEach(el => { // el(=element) -> 선택한 요소
        el.addEventListener('click', e => { // e (=event) -> MouseEvent가 들어왔을 때
            //  console.log(Array.from(el.classList));
            //console.log(Array.from(el.closest('.row').classList));

            // 중복돌 금지
            if (el.classList.contains('black') || el.classList.contains('white')) {
                alert('중복 불가능!');
                return; //여기서 return하여 함수를 종료해줘야지 뒤에 코드 실행안되서, 돌 중복을 막을 수 있다.
            }

            /*
            `forEach` 메소드가 인덱스를 인자로 넘기므로, 그것을 이용해 `locationXY`를 만들 수 있습니다. 그러면 코드가 조금 더 깔끔해졌을 것 같습니다.
            예를 들어 아래와 같이 할 수 있습니다.
            document.querySelectorAll('.row').forEach((rowEl, rowIndex) => {
                document.querySelectorAll('.col').forEach((colEl, colIndex) => {
                    ...
            */
            // 좌표 저장
            let locationXY = {x: '', y: ''}; //event함수 내부에 있어야함 x가 열 y가 행
            locationXY.x = el.classList[0].split('-')[1];
            //console.log(locationXY.x);
            locationXY.y = el.closest('.row').classList[0].split('-')[1];
            //console.log(locationXY.y);

            /*
            아래 `if...else` 구문 내부에 있는 코드가 중복되어 있습니다.
            함수를 통해 코드 중복을 제거할 수 있을 것 같습니다.
            */
            // 흰 검정돌 번갈아 놓기
            el.classList.add('black'); // 돌넣기

            // 좌표생성
            blackLocation.push(locationXY);

            //좌표를 활용하여 위치별 id값 생성
            blackID.push((15 * (locationXY.y - 1) + 1 * locationXY.x));
            blackID.sort((a, b) => a - b); // 화살표함수: 함수몸체 한 줄 표현식이면 "{return }"생략. return만 생략하고 {중괄호} 냅두면 sort함수 동작안함

            input(locationXY.y, locationXY.x);


            // 좌표생성
            whiteLocation.push(locationXY);
            locationXY.x = yy;
            locationXY.x = zz;

            el.classList.add('white');
            // 좌표를 활용하여 위치별 id값 생성
            whiteID.push((15 * (locationXY.y - 1) + 1 * locationXY.x));
            whiteID.sort((a, b) => a - b); // 화살표함수: 함수몸체 한 줄 표현식이면 "{return }"생략. return만 생략하고 {중괄호} 냅두면 sort함수 동작안함
            /*
            아래 부분 역시 코드가 중복되어 있어서, 함수를 통해 코드 중복을 제거할 수 있을 것 같습니다.
            */
            // 승패 결정
            for (let i = 0; i < blackID.length; i++) {

                // 좌우
                if (blackID.includes(blackID[i] + 1) &&
                    blackID.includes(blackID[i] + 2) &&
                    blackID.includes(blackID[i] + 3) &&
                    blackID.includes(blackID[i] + 4)) {
                    alert('좌우 검정 승리!');
                    return;
                }

                // 상하
                if (blackID.includes(blackID[i] + 15) &&     // col
                    blackID.includes(blackID[i] + 30) && // col * 2
                    blackID.includes(blackID[i] + 45) && // col * 3
                    blackID.includes(blackID[i] + 60))   // col * 4
                {
                    alert('상하 검정 승리!');
                    return;
                }

                // 왼쪽 대각선
                if (blackID.includes(blackID[i] + 16) && // (col + 1) * 1
                    blackID.includes(blackID[i] + 32) && // (col + 1) * 2
                    blackID.includes(blackID[i] + 48) && // (col + 1) * 3
                    blackID.includes(blackID[i] + 64))   // (col + 1) * 4
                {
                    alert('대각선 검정 승리!');
                    return;
                }

                // 오른쪽 대각선
                if (blackID.includes(blackID[i] + 14) && // (col - 1) * 1
                    blackID.includes(blackID[i] + 28) && // (col - 1) * 2
                    blackID.includes(blackID[i] + 42) && // (col - 1) * 3
                    blackID.includes(blackID[i] + 56))   // (col - 1) * 4
                {
                    alert('대각선 검정 승리!');
                    return;
                }
            }
            for (let i = 0; i < whiteID.length; i++) {

                // 좌우
                if (whiteID.includes(whiteID[i] + 1) &&
                    whiteID.includes(whiteID[i] + 2) &&
                    whiteID.includes(whiteID[i] + 3) &&
                    whiteID.includes(whiteID[i] + 4)) {
                    alert('좌우 흰색 승리!');
                    return;
                }

                // 상하
                if (whiteID.includes(whiteID[i] + 15) &&     // col
                    whiteID.includes(whiteID[i] + 30) && // col * 2
                    whiteID.includes(whiteID[i] + 45) && // col * 3
                    whiteID.includes(whiteID[i] + 60))   // col * 4
                {
                    alert('상하 흰색 승리!');
                    return;
                }

                // 왼쪽 대각선
                if (whiteID.includes(whiteID[i] + 16) && // (col + 1) * 1
                    whiteID.includes(whiteID[i] + 32) && // (col + 1) * 2
                    whiteID.includes(whiteID[i] + 48) && // (col + 1) * 3
                    whiteID.includes(whiteID[i] + 64))    // (col + 1) * 4
                {
                    alert('대각선 흰색 승리!');
                    return;
                }

                // 오른쪽 대각선
                if (whiteID.includes(whiteID[i] + 14) && // (col - 1) * 1
                    whiteID.includes(whiteID[i] + 28) && // (col - 1) * 2
                    whiteID.includes(whiteID[i] + 42) && // (col - 1) * 3
                    whiteID.includes(whiteID[i] + 56))   // (col - 1) * 4
                {
                    alert('대각선 흰색 승리!');
                    return;
                }
            }
        })
    })
})
